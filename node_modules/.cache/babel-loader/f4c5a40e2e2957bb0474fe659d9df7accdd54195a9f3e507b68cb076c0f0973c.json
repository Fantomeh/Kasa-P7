{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin2\\\\Documents\\\\GitHub\\\\P7 Kasa\\\\kasa\\\\src\\\\components\\\\ExpandableSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../Styles/ExpandableSection.css';\nimport minifleche from '../img/minifleche.png';\n\n// Déclaration du composant ExpandableSection avec des props id, title et children\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpandableSection = _ref => {\n  _s();\n  let {\n    id,\n    title,\n    children\n  } = _ref;\n  // Utilisation d'un état pour déterminer si la section est ouverte (isOpen) ou fermée\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Déclaration d'un gestionnaire d'événements (handleClick) pour gérer le clic sur le titre\n  const handleClick = event => {\n    // Vérifie si l'élément cliqué a le même ID que la prop \"id\"\n    if (event.currentTarget.dataset.id === id) {\n      // Basculer l'état isOpen à chaque clic (ouvrir/fermer la section)\n      setIsOpen(!isOpen);\n    }\n  };\n\n  // Retourne le JSX pour le composant ExpandableSection\n  return (\n    /*#__PURE__*/\n    // Création d'un conteneur pour le composant ExpandableSection\n    // Ajout de l'attribut \"data-id\" pour associer l'ID de chaque ExpandableSection au conteneur\n    _jsxDEV(\"div\", {\n      \"data-id\": id,\n      className: \"Expandable\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: handleClick,\n        style: {\n          cursor: 'pointer',\n          display: 'flex',\n          alignItems: 'center'\n        },\n        className: \"Expandable-Top\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"Expandable-title\",\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: minifleche,\n          alt: \"Toggle\",\n          className: \"Expandable-img\",\n          style: {\n            marginLeft: 'auto',\n            // Rotation de l'image de 180 degrés lorsque la section est ouverte\n            transform: isOpen ? 'rotate(180deg)' : 'rotate(0)',\n            // Ajout d'une transition pour que l'image pivote doucement\n            transition: 'transform 0.3s ease-in-out'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Expandable-text\",\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(ExpandableSection, \"+sus0Lb0ewKHdwiUhiTAJFoFyQ0=\");\n_c = ExpandableSection;\nexport default ExpandableSection;\nvar _c;\n$RefreshReg$(_c, \"ExpandableSection\");","map":{"version":3,"names":["React","useState","minifleche","jsxDEV","_jsxDEV","ExpandableSection","_ref","_s","id","title","children","isOpen","setIsOpen","handleClick","event","currentTarget","dataset","className","onClick","style","cursor","display","alignItems","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","marginLeft","transform","transition","_c","$RefreshReg$"],"sources":["C:/Users/Admin2/Documents/GitHub/P7 Kasa/kasa/src/components/ExpandableSection.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport '../Styles/ExpandableSection.css';\r\nimport minifleche from '../img/minifleche.png';\r\n\r\n// Déclaration du composant ExpandableSection avec des props id, title et children\r\nconst ExpandableSection = ({ id, title, children }) => {\r\n  // Utilisation d'un état pour déterminer si la section est ouverte (isOpen) ou fermée\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  // Déclaration d'un gestionnaire d'événements (handleClick) pour gérer le clic sur le titre\r\n  const handleClick = (event) => {\r\n    // Vérifie si l'élément cliqué a le même ID que la prop \"id\"\r\n    if (event.currentTarget.dataset.id === id) {\r\n      // Basculer l'état isOpen à chaque clic (ouvrir/fermer la section)\r\n      setIsOpen(!isOpen);\r\n    }\r\n  };\r\n\r\n  // Retourne le JSX pour le composant ExpandableSection\r\n  return (\r\n    // Création d'un conteneur pour le composant ExpandableSection\r\n    // Ajout de l'attribut \"data-id\" pour associer l'ID de chaque ExpandableSection au conteneur\r\n    <div data-id={id} className='Expandable'>\r\n      {/* Lorsque l'utilisateur clique sur le titre, déclenche le gestionnaire d'événements handleClick */}\r\n      <div\r\n        onClick={handleClick}\r\n        style={{ cursor: 'pointer', display: 'flex', alignItems: 'center' }}\r\n        className='Expandable-Top'\r\n      >\r\n        {/* Affichage du titre de la section */}\r\n        <h3 className='Expandable-title'>{title}</h3>\r\n        {/* Affichage de l'image de la flèche et modification de son style en fonction de l'état isOpen */}\r\n        <img\r\n          src={minifleche}\r\n          alt='Toggle'\r\n          className='Expandable-img'\r\n          style={{\r\n            marginLeft: 'auto',\r\n            // Rotation de l'image de 180 degrés lorsque la section est ouverte\r\n            transform: isOpen ? 'rotate(180deg)' : 'rotate(0)',\r\n            // Ajout d'une transition pour que l'image pivote doucement\r\n            transition: 'transform 0.3s ease-in-out',\r\n          }}\r\n        />\r\n      </div>\r\n      {/* Si la section est ouverte (isOpen), affiche le contenu de la section (children) */}\r\n      {isOpen && <div className='Expandable-text'>{children}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpandableSection;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,iCAAiC;AACxC,OAAOC,UAAU,MAAM,uBAAuB;;AAE9C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,iBAAiB,GAAGC,IAAA,IAA6B;EAAAC,EAAA;EAAA,IAA5B;IAAEC,EAAE;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAAJ,IAAA;EAChD;EACA,MAAM,CAACK,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;;EAE3C;EACA,MAAMY,WAAW,GAAIC,KAAK,IAAK;IAC7B;IACA,IAAIA,KAAK,CAACC,aAAa,CAACC,OAAO,CAACR,EAAE,KAAKA,EAAE,EAAE;MACzC;MACAI,SAAS,CAAC,CAACD,MAAM,CAAC;IACpB;EACF,CAAC;;EAED;EACA;IAAA;IACE;IACA;IACAP,OAAA;MAAK,WAASI,EAAG;MAACS,SAAS,EAAC,YAAY;MAAAP,QAAA,gBAEtCN,OAAA;QACEc,OAAO,EAAEL,WAAY;QACrBM,KAAK,EAAE;UAAEC,MAAM,EAAE,SAAS;UAAEC,OAAO,EAAE,MAAM;UAAEC,UAAU,EAAE;QAAS,CAAE;QACpEL,SAAS,EAAC,gBAAgB;QAAAP,QAAA,gBAG1BN,OAAA;UAAIa,SAAS,EAAC,kBAAkB;UAAAP,QAAA,EAAED;QAAK;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAM,eAE7CtB,OAAA;UACEuB,GAAG,EAAEzB,UAAW;UAChB0B,GAAG,EAAC,QAAQ;UACZX,SAAS,EAAC,gBAAgB;UAC1BE,KAAK,EAAE;YACLU,UAAU,EAAE,MAAM;YAClB;YACAC,SAAS,EAAEnB,MAAM,GAAG,gBAAgB,GAAG,WAAW;YAClD;YACAoB,UAAU,EAAE;UACd;QAAE;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACF;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACE,EAELf,MAAM,iBAAIP,OAAA;QAAKa,SAAS,EAAC,iBAAiB;QAAAP,QAAA,EAAEA;MAAQ;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAO;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACxD;AAEV,CAAC;AAACnB,EAAA,CA5CIF,iBAAiB;AAAA2B,EAAA,GAAjB3B,iBAAiB;AA8CvB,eAAeA,iBAAiB;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}